<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= title %> - NotesVault</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5, user-scalable=yes">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: 'Segoe UI', sans-serif;
      background: #000000;
      color: white;
      height: 100vh;
      width: 100vw;
      position: fixed;
      overflow: hidden;
    }

    .pdf-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
    }

    .pdf-toolbar {
      background: rgba(0, 0, 0, 0.9);
      padding: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 1000;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .pdf-title {
      font-size: 0.9rem;
      font-weight: 500;
      margin: 0;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 60%;
      color: rgba(255, 255, 255, 0.9);
    }

    .pdf-controls {
      display: flex;
      gap: 8px;
    }

    .pdf-button {
      background: transparent;
      border: none;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: rgba(255, 255, 255, 0.9);
      cursor: pointer;
      transition: all 0.2s ease;
      border-radius: 50%;
    }

    .pdf-button:hover {
      background: rgba(255, 255, 255, 0.1);
    }

    .pdf-viewer-container {
      position: fixed;
      top: 52px;
      left: 0;
      right: 0;
      bottom: 52px;
      overflow: auto;
      -webkit-overflow-scrolling: touch;
      background: #000;
      transform-origin: 0 0;
    }

    .pdf-pages {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 16px 0;
      gap: 16px;
      min-height: 100%;
    }

    .pdf-page {
      margin: 0 auto;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
      max-width: 100%;
      height: auto;
      background: white;
      transform-origin: center top;
    }

    .loading {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      z-index: 1000;
    }

    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
      margin: 0 auto 16px;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .error-message {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.9);
      padding: 20px;
      border-radius: 8px;
      text-align: center;
      border: 1px solid rgba(255, 255, 255, 0.1);
      z-index: 1000;
    }

    .controls-container {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.9);
      padding: 8px 16px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 1000;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .page-controls {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .page-info {
      color: rgba(255, 255, 255, 0.9);
      font-size: 0.85rem;
      padding: 4px 12px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 16px;
    }

    .zoom-controls {
      display: flex;
      gap: 8px;
    }

    .control-button {
      background: transparent;
      border: none;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: rgba(255, 255, 255, 0.9);
      cursor: pointer;
      transition: all 0.2s ease;
      border-radius: 50%;
    }

    .control-button:hover {
      background: rgba(255, 255, 255, 0.1);
    }

    @media (max-width: 768px) {
      .pdf-toolbar {
        padding: 6px;
      }

      .pdf-title {
        font-size: 0.85rem;
      }

      .pdf-button {
        width: 32px;
        height: 32px;
      }

      .control-button {
        width: 32px;
        height: 32px;
      }

      .page-info {
        font-size: 0.8rem;
        padding: 4px 10px;
      }
    }
  </style>
</head>
<body>
  <% if (isPdf) { %>
    <div class="pdf-container">
      <div class="pdf-toolbar">
        <h1 class="pdf-title"><%= title %></h1>
        <div class="pdf-controls">
          <button class="pdf-button" onclick="window.history.back()">
            <i class="fas fa-arrow-left"></i>
          </button>
          <a href="<%= pdfLink %>" download class="pdf-button">
            <i class="fas fa-download"></i>
          </a>
        </div>
      </div>
      <div class="pdf-viewer-container" id="pdfViewer">
        <div class="loading">
          <div class="loading-spinner"></div>
          <p>Loading PDF...</p>
        </div>
      </div>
      <div class="controls-container">
        <div class="page-controls">
          <button class="control-button" onclick="previousPage()">
            <i class="fas fa-chevron-left"></i>
          </button>
          <span class="page-info" id="pageInfo">Page 1 of 1</span>
          <button class="control-button" onclick="nextPage()">
            <i class="fas fa-chevron-right"></i>
          </button>
        </div>
        <div class="zoom-controls">
          <button class="control-button" onclick="zoomOut()">
            <i class="fas fa-search-minus"></i>
          </button>
          <button class="control-button" onclick="zoomIn()">
            <i class="fas fa-search-plus"></i>
          </button>
        </div>
      </div>
    </div>
  <% } else if (error) { %>
    <div class="error-message">
      <h3>Error</h3>
      <p><%= error %></p>
    </div>
  <% } %>

  <script>
    // Initialize PDF.js
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
    
    let pdfDoc = null;
    let currentPage = 1;
    let currentZoom = 1.0;
    let pageRendering = false;
    let pageNumPending = null;
    let pages = [];
    let pdfViewer = null;
    let pagesContainer = null;
    let currentScale = 1.0;
    let startX = 0;
    let startY = 0;
    let translateX = 0;
    let translateY = 0;
    let initialPinchDistance = 0;

    // Load the PDF
    async function loadPDF() {
      try {
        pdfViewer = document.getElementById('pdfViewer');
        
        // Load the PDF document
        pdfDoc = await pdfjsLib.getDocument('<%= pdfLink %>').promise;
        
        // Create container for pages
        pagesContainer = document.createElement('div');
        pagesContainer.className = 'pdf-pages';
        pdfViewer.innerHTML = '';
        pdfViewer.appendChild(pagesContainer);
        
        // Update page info
        document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${pdfDoc.numPages}`;
        
        // Render all pages
        await renderAllPages();

        // Initialize touch controls
        initTouchControls();
      } catch (error) {
        console.error('Error loading PDF:', error);
        pdfViewer.innerHTML = `
          <div class="error-message">
            <h3>Error Loading PDF</h3>
            <p>${error.message}</p>
          </div>
        `;
      }
    }

    // Initialize touch controls using Hammer.js
    function initTouchControls() {
      const hammer = new Hammer(pdfViewer);
      
      // Enable pinch and pan
      hammer.get('pinch').set({ enable: true });
      hammer.get('pan').set({ direction: Hammer.DIRECTION_ALL });

      // Handle pinch to zoom
      hammer.on('pinchstart', function(e) {
        initialPinchDistance = e.distance;
        startScale = currentScale;
      });

      hammer.on('pinch', function(e) {
        const scaleDiff = e.distance / initialPinchDistance;
        currentScale = Math.min(Math.max(startScale * scaleDiff, 0.5), 3);
        updateZoom();
      });

      hammer.on('pinchend', function(e) {
        currentZoom = currentScale;
      });

      // Handle pan/scroll
      hammer.on('panstart', function(e) {
        startX = translateX || 0;
        startY = translateY || 0;
      });

      hammer.on('pan', function(e) {
        translateX = startX + e.deltaX;
        translateY = startY + e.deltaY;
        updateZoom();
      });
    }

    // Update zoom and transform
    function updateZoom() {
      pagesContainer.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentScale})`;
    }

    // Render all pages
    async function renderAllPages() {
      pagesContainer.innerHTML = '';
      pages = [];
      
      for (let i = 1; i <= pdfDoc.numPages; i++) {
        const page = await pdfDoc.getPage(i);
        const viewport = page.getViewport({ scale: 1.0 }); // Base viewport
        
        const canvas = document.createElement('canvas');
        canvas.className = 'pdf-page';
        pagesContainer.appendChild(canvas);
        
        // Calculate scale to fit width
        const containerWidth = pdfViewer.clientWidth;
        const scale = (containerWidth / viewport.width) * currentZoom;
        const scaledViewport = page.getViewport({ scale });
        
        canvas.height = scaledViewport.height;
        canvas.width = scaledViewport.width;
        
        const ctx = canvas.getContext('2d');
        const renderContext = {
          canvasContext: ctx,
          viewport: scaledViewport
        };
        
        await page.render(renderContext).promise;
        pages.push(canvas);
      }
    }

    // Navigation functions
    function previousPage() {
      if (currentPage > 1) {
        currentPage--;
        updatePageDisplay();
      }
    }

    function nextPage() {
      if (currentPage < pdfDoc.numPages) {
        currentPage++;
        updatePageDisplay();
      }
    }

    function updatePageDisplay() {
      document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${pdfDoc.numPages}`;
      pages[currentPage - 1].scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    // Zoom functions
    async function zoomIn() {
      if (currentZoom < 3) {
        currentZoom += 0.25;
        currentScale = currentZoom;
        updateZoom();
        await renderAllPages();
      }
    }

    async function zoomOut() {
      if (currentZoom > 0.5) {
        currentZoom -= 0.25;
        currentScale = currentZoom;
        updateZoom();
        await renderAllPages();
      }
    }

    // Handle window resize
    window.addEventListener('resize', async () => {
      if (pdfDoc) {
        await renderAllPages();
      }
    });

    // Load the PDF when the page loads
    window.onload = loadPDF;
  </script>
</body>
</html> 